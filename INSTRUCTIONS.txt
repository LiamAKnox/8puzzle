*******************************************8PUZZLE********************************************
**********************************************************************************************


After running program, you will have the options to calculate solvable permutations or play 
the 8-puzzle. If you choose the first, it will calculate and display how many new boards are
created for each extra move in a bar graph, as well as the total number of permutations.

if you chose the second, you will be prompted for the desired height and width of the board
This program currently only supports sizes of 3-11 tiles. If the board is 3 x 3,
the program will prompt you to decide if you want to calculate the efficient number of moves
and which search algorithm you want to use (currently only Breadth First Search works)
for the board, more is written about this feature below.

Following this, the program will show you a board, and accept arrow key inputs to shift the tiles
each arrow key corresponds to its direction, sliding the tile adjacent to the '0' in the arrow's direction.
ex.
the up arrow would move the 7 up:
---------------------               ---------------------
|   2  |   4  |   3  |              |   2  |   4  |   3  |
---------------------               ---------------------        
|   5  |   0  |   6  |    -->       |   5  |   7  |   6  |
---------------------               ---------------------
|   1  |   7  |   8  |              |   1  |   0  |   8  |
---------------------               ---------------------

your goal is to arrange these numbers in ascending order, with the '0' in the bottom right corner:
ex. the solution to the 3 x 3 board
---------------------
|   1  |   2  |   3  |
---------------------
|   4  |   5  |   6  |
---------------------
|   7  |   8  |   0  |
---------------------


One feature offered by the program is calculating how many moves are required to efficiently solve the
given puzzle. You are prompted with 3 search algorithms, Breadth First Search, A* Search, and Iterative
Deepening Search. Breadth First Search is currently the only algorithm implemented, and because of memory 
and time requirements, this is only offered for 3 x 3 boards. This information is shared after solving a 
board under the "moves needed" heading. If you have solved the board and the code seems to have freezed, 
do not fear, it is simply calculating the number of moves and will display it when it is done.
ex. after solving a 3 x 3 board
---------------------
|   1  |   2  |   3  |
---------------------
|   4  |   5  |   6  |
---------------------
|   7  |   8  |   0  |
---------------------

moves used: 26
moves needed: 12

If you wish to leave the program at any time, pressing the enter button will let you leave.
The program is currently still in progress, so updates to the github repository will be happening
frequently. It is recommended that you check this document after each update for any new features,
requirements, or changes.


Please Enjoy!!